---
import type { Citation } from "@/lib/interfaces";
import { getSymbolForLinkedContent } from "@/utils";
import { BIBLIOGRAPHY_STYLE } from "@/constants";
import NBlocksPopover from "@/components/popover/NBlocksPopover.astro";

export interface Props {
	citations: Citation[];
}

const { citations } = Astro.props;

// Bibliography should already be sorted by prepareBibliography()
// IEEE: By Index (first appearance order)
// APA: Alphabetically by Authors

const bibliographyStyle = BIBLIOGRAPHY_STYLE || "simplified-ieee";

// Define styles matching Interlinked Content section
const bibliographyHeaderStyles = `
	#autogenerated-bibliography::before {
		content: "#";
		position: absolute;
		color: color-mix(in srgb, var(--color-accent) 50%, transparent);
		margin-left: -1.5rem;
		display: inline-block;
		opacity: 0;
		transition: opacity 0.3s ease;
	}

	#autogenerated-bibliography:hover::before {
		opacity: 1;
	}

	#-tocid--autogenerated-bibliography,
	#-vistocid--autogenerated-bibliography {
		display: block !important;
	}

	#-bottomtocid--autogenerated-bibliography {
		display: inline !important;
	}

	/* CSS counter for IEEE style numbering */
	.bibliography-ieee {
		counter-reset: citation-counter;
	}

	.bibliography-ieee li {
		display: flex;
		align-items: baseline;
		counter-increment: citation-counter;
	}

	.bibliography-ieee li::before {
		content: "[" counter(citation-counter) "] ";
		font-weight: 400;
		margin-right: 0.5rem;
		font-family: monospace;
		flex-shrink: 0;
	}
`;
---

{
	citations.length > 0 && (
		<section class="bibliography-section mt-12">
			<hr class="divider bg-accent/30 mx-auto my-4 h-0.5 w-full rounded-sm border-none" />
			<h2
				class="non-toggle-h2 mb-4 cursor-pointer text-2xl font-normal"
				id="autogenerated-bibliography"
				onclick="
					var fullUrl = `${window.location.origin}${window.location.pathname}#${id}`;
					navigator.clipboard.writeText(fullUrl);
					window.history.pushState(null, '', fullUrl);
					document.getElementById(`${id}`).scrollIntoView({ behavior: 'smooth' });
				"
			>
				Bibliography
			</h2>
			<style set:html={bibliographyHeaderStyles} />
			{/* IEEE: numbered list (1, 2, 3...) | APA: no markers (plain entries) */}
			<ol
				class:list={[
					"space-y-2 list-none",
					{ "bibliography-ieee": bibliographyStyle === "simplified-ieee" },
				]}
			>
				{citations.map((citation) => (
					<li id={`citation-def-${citation.Key}`} class="relative">
						{/* Back to citation button (hidden by default, shown via script) - positioned in left margin */}
						<button
							data-back-to-citation
							data-citation-key={citation.Key}
							class="back-to-citation-btn absolute left-0 -translate-x-full -ml-2 top-0 opacity-0 pointer-events-none w-4 h-4 rounded-full bg-accent/10 hover:bg-accent/20 flex items-center justify-center transition-all duration-200 group cursor-pointer"
							aria-label="Back to citation"
						>
							<svg class="w-3 h-3 text-accent group-hover:text-accent-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18" />
							</svg>
						</button>

						<div class="citation-entry inline">
							{/* Formatted bibliography entry */}
							{citation.Url ? (
								<a href={citation.Url} target="_blank" rel="noopener noreferrer" class="text-link decoration-solid site-page-link">
									<span set:html={citation.FormattedEntry} />
								</a>
							) : (
								<span set:html={citation.FormattedEntry} />
							)}

							{/* Backlinks with symbols using NBlocksPopover */}
							{citation.SourceBlocks && citation.SourceBlocks.length > 0 && (
								<span class="citation-backlinks ml-1">
									<span class="text-gray-500 dark:text-gray-400">at</span>
									{" "}
									{citation.SourceBlocks.map((block, index) => (
										<NBlocksPopover
											block={block}
											linkedTo={`#${block.Id}`}
											popoverSpanText={`[${getSymbolForLinkedContent(index)}]`}
											linkText="Jump to citation"
											isInterlinkedBack={true}
										/>
									))}
								</span>
							)}
						</div>
					</li>
				))}
			</ol>

			{/* Script to handle "Back to citation" button */}
			<script>
				// Set up click handlers for back buttons
				document.querySelectorAll('[data-back-to-citation]').forEach(button => {
					button.addEventListener('click', (e) => {
						e.preventDefault();
						const listItem = button.closest('li');
						const blockId = listItem?.dataset.backToBlock;

						if (blockId) {
							// Navigate back to the citation
							window.location.hash = `#${blockId}`;
							document.getElementById(blockId)?.scrollIntoView({ behavior: 'smooth' });

							// Clear the data attributes
							delete listItem.dataset.showBackButton;
							delete listItem.dataset.backToBlock;
						}
					});
				});
			</script>

			{/* CSS to show back button when data attribute is present */}
			<style>
				li[data-show-back-button="true"] .back-to-citation-btn {
					opacity: 1 !important;
					pointer-events: auto !important;
				}
			</style>
		</section>
	)
}
